#!/usr/bin/env python

# Test to see if the `ephem' library gives the same computational
# results as the XEphem application itself.

import string
import math
from ephem import *

#
# Define a few convenient functions and variables.
#

ss = scanSexagesimal
def fs(a):
    return formatSexagesimal(a, 3, 360000)

from math import pi
twopi = 2 * pi

#
# Define a test harness.  For the circumstance and object given, we will
# typeset the:
#	constellation
#	right ascension
#	azimuth
#	air mass
#	earth distance
#	elongation
#	visual magnitude
#	rise time
#	hours up
# in exactly the same formats XEphem outputs them in (see its datamenu.c),
# and see if they match the results that XEphem gives me if the same
# circumstances are entered manually.
#

def format_test(o):
    computeLocation(c, o)
    r = RiseSet()
    computeRiseSet(c, o, 0, r)
    
    if o.any.altitude > 0.1:
        s_alt = "%4.2f" % (1./math.sin(o.any.altitude))
    else:
        s_alt = "%4.0f" % 99.0
        
    if o.any.type == PLANET and o.pl.code == MOON:
        s_eadst = "%6.0f" % (o.anyss.earthDistance * MetersPerAU/1000.0)
    elif o.any.type == EARTHSAT:
        s_eadst = "      "
    elif o.anyss.earthDistance >= 9.99995:
        s_eadst = "%6.3f" % o.anyss.earthDistance
    else:
        s_eadst = "%6.4f" % o.anyss.earthDistance
    
    if o.any.type != PLANET or o.pl.code != SUN:
        s_e = "%6.1f" % o.any.elongation
    else:
        s_e = "      "
    
    if o.any.type != EARTHSAT:
        if o.any.magnitude <= -9.95:
            s_mag = "%4.0f" % o.any.magnitude
        else:
            s_mag = "%4.1f" % o.any.magnitude
    else:
        s_mag = "    "
    
    return string.join(("%-13.13s" % describe(o),
                        constellation(o.any.ra,o.any.dec,J2000),
                        formatHours(o.any.ra, 360000),
                        formatDegrees(o.any.azimuth, 3600),
                        s_alt,
                        s_eadst,
                        s_e,
                        s_mag,
                        formatTime(r.riseTime, 60),
                        " " + formatDegrees(r.riseAzimuth, 60)
                        ))

#
# Create a Circumstance object, and initialize it to the time and
# place at which the test file was generated.
#

c = Circumstance()

c.mjd =		2450976.82649 - MJD0
c.latitude =	degrad(ss("33:45:10"))
c.longitude =	degrad(ss("-84:23:37"))
c.elevation =	320.0/EarthRadius       # (earth radii)
c.timezone =	4.0
c.temperature = 10.0                    # (degrees Celsius)
c.pressure =	1010.0                  # (miliBars)
c.epoch =	J2000

#
# Define several database entries.  Normally these would be taken from
# a file.
#

ceres = "1 Ceres,e,10.581838,80.510424,73.665583,2.76678519,0,0.0777263," + \
        "228.301797,3/28/1998,2000.0,3.34,0.12"
halebopp = "C/1995 O1 (Hale-Bopp),e,89.4296,282.4707,130.5877,187.8612," + \
           "0.0003828,0.995134,0.0233,06/01.0/1997,2000,g -2.0,4.0"
mir = "Mir-360,E,1/160.10186478/1997, 51.6516,126.4831,0.0005934,126.2029," + \
      "233.9659,15.59462660, .00001326,64576"

#
# First we take the report generated by XEphem for this set of objects
# under the above circumstance, and split it into one line for each.
#

standard = """Cns RA          Az        Air  EaDst  Elong  VMag RiseTm RiseAz
Sun           Tau  5:21:38.77  33:43:47   99 1.0155         -27 10:28   61:21
Moon          Sgr 19:10:19.41 187:04:28 1.68 382594 -154.2  -13  2:59  111:48
Mercury       Tau  5:32:24.55  30:40:12   99 1.3196    2.8 -2.4 10:35   59:42
Pluto         Oph 16:26:17.78 234:59:32 2.12 29.109  160.7 13.7 23:01  100:38
1 Ceres       Cet  2:54:03.20  70:23:07   99 3.6087  -37.6  9.2  8:40   77:38
C/1995 O1 (Ha Pic  6:02:43.59 140:34:45   99 5.7455   73.6  9.2 15:40  155:54
Mir-360       Mon  6:40:22.59  30:32:54   99           0.0      18:36  200:28
"""

standards = string.split(standard, "\n")
del standards[0]

#
# Now we create the different objects and have their computed parameters
# compared with the ones taken from the XEphem application.
#

objects = [ Obj(), Obj(), Obj(), Obj(), Obj(), Obj(), Obj() ]

objects[0].any.type = PLANET; objects[0].pl.code = SUN;
objects[1].any.type = PLANET; objects[1].pl.code = MOON;
objects[2].any.type = PLANET; objects[2].pl.code = MERCURY;
objects[3].any.type = PLANET; objects[3].pl.code = PLUTO;
scanDB(ceres, objects[4]);
scanDB(halebopp, objects[5]);
scanDB(mir, objects[6]);

outputs = map(lambda (o): format_test(o), objects)

errors = 0

for i in range(0,7):
    if standards[i][14:] != outputs[i][14:]:
        print repr(i) + " expected: " + standards[i][14:]
        print repr(i) + " returned: " + outputs[i][14:]
        errors = errors + 1

if errors == 0:
    print "Test completed successfully."
else:
    print "Test encountered %d failures." % errors
